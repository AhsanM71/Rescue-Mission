@startuml A2

!define MyTheme
skinparam class {
    BackgroundColor #LightYellow
    BorderColor #000000
    FontColor #000000
}

skinparam stereotypeCBackgroundColor #LightYellow
skinparam stereotypeCBorderColor #000000
skinparam stereotypeCFontColor #000000

class Coordinate {
    - x: int
    - y: int
    --
    + this(x: int, y: int)
    --
    + getX(): int
    + getY(): int
    + setX(x: int): void
    + setY(y: int): void
    + distanceTo(other: Coordinate): double
}

enum Direction {
  - symbol: String
  --
  + getSymbol(): String
  + fromSymbol(s: String): Direction
  + getRight(): Direction
  + getLeft(): Direction
}

class Drone {
  - batteryLevel: Integer
  - heading: Direction
  - location: Coordinate
  --
  + this(batteryLevel: Integer, heading: Direction)
  --
  + getHeading(): Direction
  + drainBattery(cost: Integer): void
  + getBatteryLevel(): Integer
  + getX(): int
  + getY(): int
  + flyForward(): void
  + turnRight(): void
  + turnLeft(): void
}

class DroneController {
  - drone: Drone
  --
  + this(drone: Drone)
  --
  + getBatteryLevel(): Integer
  + getHeading(): Direction
  + getX(): int
  + getY(): int
  + fly(): String
  + heading(dir: Direction): String
  + echo(dir: Direction): String
  + scan(): String
  + stop(): String
}

class Map {
    + creeks: List<POI>
    + emergencySite: List<POI>
    --
    + this()
    --
    + addCreek(creek: POI)
    + addEmergencySite(site: POI)
}

enum TypePOI {
  CREEK
  EMERGENCY_SITE
  HOMEBASE
}

class PointOfInterest {
  - kind: String
  - id: String
  - location: Coordinate
  --
    + this(kind: String, location: Coordinate, id: String)
  --
    + getLocation(): Coordinate
    + getKind(): String
    + getID(): String
}

interface Search {
  + performSearch(): String
  + readResponse(response: JSONObject): void
}

' class Runner {
'   + <<static>> main(): void
' }

class Explorer {
  - logger: Logger
  - drone: Drone
  - gridSearch: Search
  - map: Map
  --
  + initialize(s: String): void
  + takeDecision(): String
  + acknowledgeResults(s: String): void
  + deliverFinalReport(): String
}

class GridSearch {
  - drone: Drone
  - controller: DroneController
  - flyCount: int
  - turnCount: int
  - direction: Direction
  - prevDirection: Direction
  - prevLeftEcho: String
  - frontEcho: boolean
  - leftEcho: boolean
  - rightEcho: boolean
  - shouldTurn: boolean
  - atIsland: boolean
  - turnLeft: boolean
  - checkIsland: boolean
  - checkInitially: boolean
  - turnBeforeScan: boolean
  - uturn: boolean
  --
  + this(drone: Drone)
  --
  + performSearch(): String
  + readResponse(): void
  + getDroneRoutineSearch(count: int): String
  + getDroneRoutineScan(count: int): String
}




Search <|.. GridSearch
Coordinate --o Drone
Coordinate --o PointOfInterest
DroneController --* Drone
PointOfInterest --* Map

Drone --o GridSearch
DroneController --o GridSearch

GridSearch --* Explorer

Direction --* Drone

Direction -- DroneController

GridSearch -- Map

TypePOI -- PointOfInterest


@enduml