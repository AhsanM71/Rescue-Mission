@startuml A2
!define MyTheme
skinparam class {
    BackgroundColor #LightYellow
    BorderColor #000000
    FontColor #000000
}

skinparam stereotypeCBackgroundColor #LightYellow
skinparam stereotypeCBorderColor #000000
skinparam stereotypeCFontColor #000000


package drone {
    interface Controller {
  + fly(): String
  + heading(dir: Direction): String
  + echo(dir: Direction): String
  + scan(): String
  + stop(): String
  
}

interface Drone {
'   + getBatteryLevel(): Integer
  + drainBattery(cost: Integer): void
  + notEnoughBattery(costFly: Integer, costHeading: Integer): boolean
'   + getHeading(): Direction
'   + getLocation(): Coordinate
  + flyForward(): void
  + turnRight(): void
  + turnLeft(): void
}

class DroneController {
'   - drone: Drone
  --
  + this(drone: Drone)
  --
  + fly(): String
  + heading(dir: Direction): String
  + echo(dir: Direction): String
  + scan(): String
  + stop(): String
}

class SimpleDrone {
'   - batteryLevel: Integer
'   - heading: Direction
'   - location: Coordinate
  --
  + this(batteryLevel: Integer, heading: Direction)
  --
  + drainBattery(cost: Integer): void
  + notEnoughBattery(costFly: Integer, costHeading: Integer): boolean
  + flyForward(): void
  + turnRight(): void
  + turnLeft(): void

'   + getBatteryLevel(): Integer
'   + getHeading(): Direction
'   + getLocation(): Coordinate
}

}




package phase {
    class UTurn {
    ' - controller: Controller
    ' - direction: Direction
    ' - turnLeft: boolean
    ' - hasTurned: boolean
    ' - turnCount: Integer
    ' - FLY: Integer
    ' - TURN_OPPOSITE: Integer
    ' - command: String
    ' --
    + this(controller: Controller, dir: Direction, turnLeft: boolean, outward: boolean)
    --
    + getDroneCommand(): String
    + processInfo(info: JSONObject): void
    + getNextPhase(): Phase
    + isFinished(): boolean
    + isLastPhase(): boolean
    ' - turnCommand(durLeft: boolean): String
    }
class ScanLine {
    ' - State: enum
    ' - logger: Logger
    ' - controller: Controller
    ' - direction: Direction
    ' - turnLeft: boolean
    ' - offIsland: boolean
    ' - hasMoved: boolean
    ' - moveOutwards: boolean
    ' - state: State
    ' --
    + this(controller: Controller, initialDirection: Direction, turnLeft: boolean)
    --
    + getDroneCommand(): String
    + processInfo(info: JSONObject): void
    + getNextPhase(): Phase
    + isFinished(): boolean
    + isLastPhase(): boolean
    ' - isDroneOffLand(info: JSONObject): boolean
    }
    class MoveToCorner {
    ' - State: enum
    ' - logger: Logger
    ' - controller: Controller
    ' - direction: Direction
    ' - finalDirection: Direction
    ' - state: State
    ' - distanceLeft: int
    ' - distanceRight: int
    ' - distanceTraveled: int
    ' - hasReachedCorner: boolean
    --
    + this(controller: Controller, initialDir: Direction)
    --
    + getDroneCommand(): String
    + processInfo(info: JSONObject): void
    + getNextPhase(): Phase
    + isFinished(): boolean
    + isLastPhase(): boolean
    }
    class FindIsland {
    ' - State: enum
    ' - logger: Logger
    ' - direction: Direction
    ' - atIsland: boolean
    ' - uTurnLeft: boolean
    ' - flightsToIsland: Integer
    ' - state: State
    --
    + this(controller: Controller, initialDirection: Direction)
    --
    + getDroneCommand(): String
    + processInfo(info: JSONObject): void
    + getNextPhase(): Phase
    + isFinished(): boolean
    + isLastPhase(): boolean
    }
    interface Phase {
        + getDroneCommand(): String
        + processInfo(info: JSONObject): void
        + getNextPhase(): Phase
        + isFinished(): boolean
        + isLastPhase(): boolean
    }
}

package search {
    class GridSearch {
'   - logger: Logger
'   - drone: Drone
'   - controller: Controller
'   - map: Map
'   - phase: Phase
'   --
  + this(drone: Drone, map: Map)
  --
  + performSearch(): String
  + readResponse(response: JSONObject): void
}

interface Search {
  + performSearch(): String
  + readResponse(response: JSONObject): void
}

}

package position {
    enum Direction {
'   - symbol: String
'   --
'   + getSymbol(): String
'   + getRight(): Direction
'   + getLeft(): Direction
  + <<static>> fromSymbol(s: String): Direction
  
}
    class Coordinate {
    ' - x: int
    ' - y: int
    ' --
    + this(x: int, y: int)
    ' --
    ' + getX(): int
    ' + getY(): int
    ' + setX(x: int): void
    ' + setY(y: int): void
    + distanceTo(other: Coordinate): double
}
}

package map {
    class ListMap {
    + creeks: List<POI>
    + emergencySite: POI
    ' --
    + this()
    ' --
    + addPOI(poi: POI): void
    ' + getEmergencySiteID(): String
    ' + getClosetCreekID(): String
}

interface Map {
    + addPOI(poi: POI): void
    ' + getEmergencySiteID(): String
    ' + getClosetCreekID(): String
}

enum TypePOI {
  CREEK
  EMERGENCY_SITE
}

class POI {
'   - kind: TypePOI
'   - location: Coordinate
'   - id: String
'   --
  + this(kind: TypePOI, location: Coordinate, id: String)
  --
'   + getKind(): TypePOI
'   + getLocation(): Coordinate
'   + getID(): String
}
}

package report{
    class MissionReport{
    ' - map: Map
    ' --
    + this(map: Map)
    ' --
    + generateReport(): String
    ' - closestCreekID(): String
    ' - emergencySiteID(): String
}

interface Report{
    + generateReport(): String
}
}

class Explorer {
'   - logger: Logger
'   - drone: Drone
'   - gridSearch: Search
'   - map: Map
  --
  + initialize(s: String): void
  + takeDecision(): String
  + acknowledgeResults(s: String): void
  + deliverFinalReport(): String
}

' phase package
Phase <|.up. MoveToCorner
Phase <|.. FindIsland
Phase <|..right. ScanLine
Phase <|..left. UTurn
' Direction -up- FindIsland
' Direction -up- MoveToCorner
' Direction -up- ScanLine
' Direction -up- UTurn

' search package
Search <|.up. GridSearch



' drone package
Controller <|.up. DroneController
Drone <|.up. SimpleDrone
DroneController o-- Drone


' report package
Report <|.up. MissionReport


' position package
Coordinate --o POI

' map package
Map <|.up. ListMap
POI --* ListMap
TypePOI -- POI


Drone --o GridSearch
Controller --o GridSearch
Map -down-o GridSearch
GridSearch *-up- Phase

Coordinate ----o SimpleDrone
Direction ----o SimpleDrone



MissionReport o-- Map

' UTurn o-up- Controller
' ScanLine o---- Controller
' FindIsland o---- Controller
' MoveToCorner o---- Controller



Search -up-* Explorer
Map --* Explorer
Report --* Explorer

@enduml